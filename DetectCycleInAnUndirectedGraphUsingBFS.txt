#include<bits/stdc++.h>
using namespace std;

const int V = 4;

void addEdge(vector<int> adj[], int source, int destination) {
    adj[source].push_back(destination);
    adj[destination].push_back(source);
}

bool BFS(vector<int> adj[], vector<int> &visited, int node, int initial_parent) {
    queue<pair<int, int>> q;
    q.push({node, initial_parent});
    visited[node] = 1;
    
    while(!q.empty()) {
        int front_node = q.front().first;
        int parent = q.front().second;
        q.pop();
        for(int neighbour: adj[front_node]) {
            if(!visited[neighbour]) {
                q.push({neighbour, front_node});
                visited[neighbour] = 1;
            }
            else if(parent != neighbour) {
                return true;
            }
        }
    }
    return false;
}

int main() {
    
    vector<int> adj[V];
    vector<int> visited(V, 0);
    
    addEdge(adj, 0, 1);
    addEdge(adj, 0, 2);
    addEdge(adj, 0, 3);
    addEdge(adj, 1, 2);
    
    int initial_parent = -1;
    bool result;
    
    for(int i = 0; i < V; i++) {
        if(!visited[i]) {
            if(BFS(adj, visited, i, initial_parent)) {
                result = true;        
            }
            else result = false;
        }
    }
    
    if(result) cout<<"Cycle detected in an undirected graph !!"<<endl;
    else cout<<"No cycle detected in an undirected graph !!"<<endl;
    
    return 0;
}